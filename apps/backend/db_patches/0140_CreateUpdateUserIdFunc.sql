DO
$DO$
BEGIN
	IF register_patch('CreateUpdateUserIdFunc.sql', 'Chi Kai Lam', 'Update user id for merging', '2024-02-09') THEN
    BEGIN
      
      CREATE OR REPLACE FUNCTION UPDATE_USER_ID(INOUT P_OLD_USER_ID BIGINT, INOUT P_NEW_USER_ID BIGINT)
      LANGUAGE PLPGSQL AS
      $$
      DECLARE
        TOTAL_ROWS           INTEGER := 0;
        OLD_USER_ID_ROWS     INTEGER := 0;
        OLD_USERS_REC        USERS%ROWTYPE;
      BEGIN
          IF P_OLD_USER_ID = P_NEW_USER_ID THEN 
              RETURN;
          END IF; 
          SELECT COUNT(*) FROM USERS WHERE USER_ID = P_OLD_USER_ID OR USER_ID = P_NEW_USER_ID INTO TOTAL_ROWS;
          IF TOTAL_ROWS = 2 THEN
              SELECT * FROM USERS WHERE USER_ID = P_OLD_USER_ID INTO OLD_USERS_REC;
              --DEAL WITH FK TABLES, WE CAN SAFELY UPDATE THEM NOW SINCE THE NEW ROW IN USERS
              --DELETE ANY DUPLICATES THAT HAVE BEEN CREATED AGAINST THE NEW USER ID
              DELETE FROM PROPOSAL_USER 
              WHERE USER_ID = P_NEW_USER_ID 
              AND PROPOSAL_PK IN 
              (
                  SELECT PROPOSAL_PK FROM PROPOSAL_USER 
                  WHERE USER_ID = P_OLD_USER_ID
              ); 
              --UPDATE THE OLD USER NUMBER TO THE NEW USER NUMBER
              UPDATE PROPOSAL_USER SET USER_ID = P_NEW_USER_ID WHERE USER_ID = P_OLD_USER_ID;
              UPDATE PROPOSALS SET PROPOSER_ID = P_NEW_USER_ID WHERE PROPOSER_ID = P_OLD_USER_ID;
              DELETE FROM USERS WHERE USER_ID = P_OLD_USER_ID;
              --UPDATE NEW RECORD WITH INFORMATION FROM THE OLD ONE
              UPDATE USERS 
                  SET (USER_TITLE, MIDDLENAME, FIRSTNAME, LASTNAME, USERNAME, PASSWORD, PREFERREDNAME, OIDC_SUB, OAUTH_REFRESH_TOKEN, GENDER, BIRTHDATE, DEPARTMENT, POSITION, EMAIL, EMAIL_VERIFIED, TELEPHONE, TELEPHONE_ALT, UPDATED_AT, ORGANISATION, NATIONALITY, PLACEHOLDER, OAUTH_ACCESS_TOKEN, OAUTH_ISSUER) 
                  = (OLD_USERS_REC.USER_TITLE, OLD_USERS_REC.MIDDLENAME, OLD_USERS_REC.FIRSTNAME, OLD_USERS_REC.LASTNAME, OLD_USERS_REC.USERNAME, OLD_USERS_REC.PASSWORD, OLD_USERS_REC.PREFERREDNAME, OLD_USERS_REC.OIDC_SUB, OLD_USERS_REC.OAUTH_REFRESH_TOKEN, OLD_USERS_REC.GENDER, OLD_USERS_REC.BIRTHDATE, OLD_USERS_REC.DEPARTMENT, OLD_USERS_REC.POSITION, OLD_USERS_REC.EMAIL, OLD_USERS_REC.EMAIL_VERIFIED, OLD_USERS_REC.TELEPHONE, OLD_USERS_REC.TELEPHONE_ALT, NOW(), OLD_USERS_REC.ORGANISATION, OLD_USERS_REC.NATIONALITY, OLD_USERS_REC.PLACEHOLDER, OLD_USERS_REC.OAUTH_ACCESS_TOKEN, OLD_USERS_REC.OAUTH_ISSUER)
                  WHERE USER_ID = P_NEW_USER_ID;
          ELSIF TOTAL_ROWS = 1 THEN
              SELECT COUNT(*) FROM USERS WHERE USER_ID = P_OLD_USER_ID INTO OLD_USER_ID_ROWS;
              -- WE DON'T NEED TO DO ANYTHING IF ONLY THE NEW RECORD APPEARS IN THE TABLE
              IF OLD_USER_ID_ROWS > 0 THEN
                  SELECT * FROM USERS WHERE USER_ID = P_OLD_USER_ID INTO OLD_USERS_REC;
                  INSERT INTO USERS (USER_ID, USER_TITLE, MIDDLENAME, FIRSTNAME, LASTNAME, USERNAME, PASSWORD, 
                          PREFERREDNAME, OIDC_SUB, OAUTH_REFRESH_TOKEN, GENDER, BIRTHDATE, DEPARTMENT, POSITION, 
                          EMAIL, EMAIL_VERIFIED, TELEPHONE, TELEPHONE_ALT, CREATED_AT, UPDATED_AT, ORGANISATION, NATIONALITY, PLACEHOLDER, OAUTH_ACCESS_TOKEN, OAUTH_ISSUER) 
                      VALUES (P_NEW_USER_ID, OLD_USERS_REC.USER_TITLE, OLD_USERS_REC.MIDDLENAME, OLD_USERS_REC.FIRSTNAME, OLD_USERS_REC.LASTNAME, P_NEW_USER_ID, OLD_USERS_REC.PASSWORD, 
                          OLD_USERS_REC.PREFERREDNAME, OLD_USERS_REC.OIDC_SUB, OLD_USERS_REC.OAUTH_REFRESH_TOKEN, OLD_USERS_REC.GENDER, OLD_USERS_REC.BIRTHDATE, OLD_USERS_REC.DEPARTMENT, OLD_USERS_REC.POSITION, 
                          P_NEW_USER_ID, FALSE, OLD_USERS_REC.TELEPHONE, OLD_USERS_REC.TELEPHONE_ALT, NOW(), NOW(), OLD_USERS_REC.ORGANISATION, OLD_USERS_REC.NATIONALITY, OLD_USERS_REC.PLACEHOLDER, OLD_USERS_REC.OAUTH_ACCESS_TOKEN, OLD_USERS_REC.OAUTH_ISSUER);
                  UPDATE PROPOSAL_USER SET USER_ID = P_NEW_USER_ID WHERE USER_ID = P_OLD_USER_ID;
                  UPDATE PROPOSALS SET PROPOSER_ID = P_NEW_USER_ID WHERE PROPOSER_ID = P_OLD_USER_ID;
                  DELETE FROM USERS WHERE USER_ID = P_OLD_USER_ID;
                  UPDATE USERS SET (USERNAME, EMAIL, EMAIL_VERIFIED) = (OLD_USERS_REC.USERNAME, OLD_USERS_REC.EMAIL, OLD_USERS_REC.EMAIL_VERIFIED) 
                      WHERE USER_ID = P_NEW_USER_ID;
              END IF;
          END IF;
          RETURN; 
          COMMIT;

          EXCEPTION WHEN OTHERS THEN
              RAISE EXCEPTION 'ROLLBACK UPDATE_USER_ID FUNC WITH OLD USER ID: % AND NEW USER ID: %', P_OLD_USER_ID, P_NEW_USER_ID;
              ROLLBACK;

      END;
      $$;
    END;
	END IF;
END;
$DO$;
