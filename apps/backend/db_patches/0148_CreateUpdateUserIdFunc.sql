DO
$DO$
BEGIN
  IF REGISTER_PATCH('CreateOrReplaceOldUserIdWithNewFunc.SQL', 'CHI KAI LAM', 'UPDATE USER ID FOR MERGING', '2024-03-11') THEN
    BEGIN
      
      CREATE OR REPLACE FUNCTION REPLACE_OLD_USER_ID_WITH_NEW(INOUT P_OLD_USER_ID BIGINT, INOUT P_NEW_USER_ID BIGINT)
      LANGUAGE PLPGSQL AS
      $$
      DECLARE
        NEW_USER_CNT     INTEGER := 0;
        OLD_USER_CNT     INTEGER := 0;
      BEGIN
          IF P_OLD_USER_ID = P_NEW_USER_ID THEN 
              RETURN;
          END IF; 
          SELECT COUNT(*) FROM USERS WHERE USER_ID = P_OLD_USER_ID INTO OLD_USER_CNT;
          IF OLD_USER_CNT = 0 THEN 
              RETURN;
          END IF; 
          SELECT COUNT(*) FROM USERS WHERE USER_ID = P_NEW_USER_ID INTO NEW_USER_CNT;
          IF NEW_USER_CNT = 0 THEN
              INSERT INTO USERS (USER_ID, FIRSTNAME, LASTNAME, USERNAME, GENDER, BIRTHDATE, DEPARTMENT, POSITION, EMAIL, TELEPHONE) 
                VALUES (P_NEW_USER_ID, '', '', P_NEW_USER_ID, '', NOW(), '', '', P_NEW_USER_ID, '');
          END IF;
          --UPDATE TABLES ROW WITH OLD USER ID TO NEW USER ID
          UPDATE EVENT_LOGS SET CHANGED_BY = P_NEW_USER_ID WHERE CHANGED_BY = P_OLD_USER_ID; 
          UPDATE EXPERIMENT_SAFETY_INPUTS SET CREATOR_ID = P_NEW_USER_ID WHERE CREATOR_ID = P_OLD_USER_ID; 
          UPDATE FAP_MEETING_DECISIONS SET SUBMITTED_BY = P_NEW_USER_ID WHERE SUBMITTED_BY = P_OLD_USER_ID; 
          UPDATE FAPS SET FAP_CHAIR_USER_ID = P_NEW_USER_ID WHERE FAP_CHAIR_USER_ID = P_OLD_USER_ID; 
          UPDATE FEEDBACKS SET CREATOR_ID = P_NEW_USER_ID WHERE CREATOR_ID = P_OLD_USER_ID; 
          UPDATE GENERIC_TEMPLATES SET CREATOR_ID = P_NEW_USER_ID WHERE CREATOR_ID = P_OLD_USER_ID; 
          UPDATE INSTRUMENTS SET MANAGER_USER_ID = P_NEW_USER_ID WHERE MANAGER_USER_ID = P_OLD_USER_ID; 
          UPDATE INTERNAL_REVIEWS SET ASSIGNED_BY = P_NEW_USER_ID WHERE ASSIGNED_BY = P_OLD_USER_ID; 
          UPDATE INTERNAL_REVIEWS SET REVIEWER_ID = P_NEW_USER_ID WHERE REVIEWER_ID = P_OLD_USER_ID; 
          UPDATE PDF_TEMPLATES SET CREATOR_ID = P_NEW_USER_ID WHERE CREATOR_ID = P_OLD_USER_ID; 
          UPDATE PREDEFINED_MESSAGES SET LAST_MODIFIED_BY = P_NEW_USER_ID WHERE LAST_MODIFIED_BY = P_OLD_USER_ID; 
          UPDATE PROPOSALS SET PROPOSER_ID = P_NEW_USER_ID WHERE PROPOSER_ID = P_OLD_USER_ID; 
          UPDATE QUESTIONARIES SET CREATOR_ID = P_NEW_USER_ID WHERE CREATOR_ID = P_OLD_USER_ID; 
          UPDATE REDEEM_CODES SET CLAIMED_BY = P_NEW_USER_ID WHERE CLAIMED_BY = P_OLD_USER_ID; 
          UPDATE REDEEM_CODES SET CREATED_BY = P_NEW_USER_ID WHERE CREATED_BY = P_OLD_USER_ID; 
          UPDATE REDEEM_CODES SET PLACEHOLDER_USER_ID = P_NEW_USER_ID WHERE PLACEHOLDER_USER_ID = P_OLD_USER_ID; 
          UPDATE SAMPLES SET CREATOR_ID = P_NEW_USER_ID WHERE CREATOR_ID = P_OLD_USER_ID; 
          UPDATE SCHEDULED_EVENTS SET LOCAL_CONTACT = P_NEW_USER_ID WHERE LOCAL_CONTACT = P_OLD_USER_ID; 
          UPDATE SHIPMENTS SET CREATOR_ID = P_NEW_USER_ID WHERE CREATOR_ID = P_OLD_USER_ID; 
          UPDATE TECHNICAL_REVIEW SET REVIEWER_ID = P_NEW_USER_ID WHERE REVIEWER_ID = P_OLD_USER_ID; 
          UPDATE TECHNICAL_REVIEW SET TECHNICAL_REVIEW_ASSIGNEE_ID = P_NEW_USER_ID WHERE TECHNICAL_REVIEW_ASSIGNEE_ID = P_OLD_USER_ID; 
          UPDATE VISITS SET CREATOR_ID = P_NEW_USER_ID WHERE CREATOR_ID = P_OLD_USER_ID; 
          UPDATE VISITS SET TEAM_LEAD_USER_ID = P_NEW_USER_ID WHERE TEAM_LEAD_USER_ID = P_OLD_USER_ID; 

          --UPDATE TABLES ROW WITH OLD USER ID THAT IS NOT OVERLAP WITH NEW USER ID AND THEN
          --DELETE TABLES ROW WITH OLD USER ID THAT IS OVERLAP WITH NEW USER ID  
          UPDATE FAP_REVIEWERS SET USER_ID = P_NEW_USER_ID WHERE USER_ID = P_OLD_USER_ID 
            AND FAP_ID NOT IN ( SELECT FAP_ID FROM  FAP_REVIEWERS WHERE USER_ID = P_NEW_USER_ID );
          DELETE FROM FAP_REVIEWERS WHERE USER_ID = P_OLD_USER_ID;

          UPDATE FAP_REVIEWS SET USER_ID = P_NEW_USER_ID WHERE USER_ID = P_OLD_USER_ID 
            AND PROPOSAL_PK NOT IN ( SELECT PROPOSAL_PK FROM  FAP_REVIEWS WHERE USER_ID = P_NEW_USER_ID );
          DELETE FROM FAP_REVIEWS WHERE USER_ID = P_OLD_USER_ID;

          UPDATE INSTRUMENT_HAS_SCIENTISTS SET USER_ID = P_NEW_USER_ID WHERE USER_ID = P_OLD_USER_ID 
            AND INSTRUMENT_ID NOT IN ( SELECT INSTRUMENT_ID FROM INSTRUMENT_HAS_SCIENTISTS WHERE USER_ID = P_NEW_USER_ID ) ;
          DELETE FROM INSTRUMENT_HAS_SCIENTISTS WHERE USER_ID = P_OLD_USER_ID;

          UPDATE PROPOSAL_USER SET USER_ID = P_NEW_USER_ID WHERE USER_ID = P_OLD_USER_ID 
            AND PROPOSAL_PK NOT IN ( SELECT PROPOSAL_PK FROM PROPOSAL_USER WHERE USER_ID = P_NEW_USER_ID );
          DELETE FROM PROPOSAL_USER WHERE USER_ID = P_OLD_USER_ID;

          UPDATE ROLE_USER SET USER_ID = P_NEW_USER_ID WHERE USER_ID = P_OLD_USER_ID 
            AND ROLE_ID NOT IN ( SELECT ROLE_ID FROM ROLE_USER WHERE USER_ID = P_NEW_USER_ID );
          DELETE FROM ROLE_USER WHERE USER_ID = P_OLD_USER_ID;

          UPDATE VISITS_HAS_USERS SET USER_ID = P_NEW_USER_ID WHERE USER_ID = P_OLD_USER_ID 
            AND VISIT_ID NOT IN ( SELECT VISIT_ID FROM VISITS_HAS_USERS WHERE USER_ID = P_NEW_USER_ID );
          DELETE FROM VISITS_HAS_USERS WHERE USER_ID = P_OLD_USER_ID;

          UPDATE FAP_SECRETARIES SET USER_ID = P_NEW_USER_ID WHERE USER_ID = P_OLD_USER_ID 
            AND FAP_ID NOT IN ( SELECT FAP_ID FROM FAP_SECRETARIES WHERE USER_ID = P_NEW_USER_ID ) ;
          DELETE FROM FAP_SECRETARIES WHERE USER_ID = P_OLD_USER_ID;

          UPDATE FAP_ASSIGNMENTS SET FAP_MEMBER_USER_ID = P_NEW_USER_ID WHERE FAP_MEMBER_USER_ID = P_OLD_USER_ID AND 
          (PROPOSAL_PK, FAP_ID) NOT IN ( SELECT PROPOSAL_PK, FAP_ID FROM FAP_ASSIGNMENTS WHERE FAP_MEMBER_USER_ID = P_NEW_USER_ID );

          DELETE FROM FAP_ASSIGNMENTS WHERE FAP_MEMBER_USER_ID = P_OLD_USER_ID AND 
          (PROPOSAL_PK, FAP_ID) IN ( SELECT PROPOSAL_PK, FAP_ID FROM FAP_ASSIGNMENTS WHERE FAP_MEMBER_USER_ID = P_NEW_USER_ID );

          DELETE FROM USERS WHERE USER_ID = P_OLD_USER_ID;

          RETURN; 

          EXCEPTION WHEN OTHERS THEN
              RAISE EXCEPTION 'ROLLBACK REPLACE_OLD_USER_ID_WITH_NEW FUNC WITH OLD USER ID: % AND NEW USER ID: %', P_OLD_USER_ID, P_NEW_USER_ID;
      END;
      $$;
    END;
  END IF;
END;
$DO$;
